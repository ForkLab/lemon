#!/usr/bin/env python

import logging
import os
import subprocess
import sys
import time
from optparse import OptionParser

from webassets import Bundle, Environment
from webassets.bundle import BuildError
from webassets.filter import Filter, register_filter
from webassets.script import CommandLineEnvironment, CommandError


DIRNAME = os.path.abspath(os.path.dirname(__file__))


class StylusFilter(Filter):

    name = 'stylus'

    def setup(self):
        self.stylus = os.path.join(DIRNAME, 'stylus')

    def input(self, _in, out, source_path, output_path):
        old_dir = os.getcwd()
        os.chdir(os.path.dirname(source_path))
        try:
            proc = subprocess.Popen(
                [self.stylus, source_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                raise Exception(
                    'stylus: subprocess had error: stderr=%s, stdout=%s, '
                    'returncode=%s' % (stderr, stdout, proc.returncode))
            elif stderr:
                print 'stylus filter has warnings:', stderr
            out.write(stdout)
        finally:
            os.chdir(old_dir)


register_filter(StylusFilter)


extradmin = Environment('lemon/extradmin/static/extradmin', '/static/extradmin')

extradmin.register('css', Bundle(
    'css/reset.css',
    Bundle('css/default.styl',
           'css/base.styl',
           filters='stylus'),
    'css/jquery.ui.css',
    Bundle('css/changelist.styl',
           'css/changeform.styl',
           filters='stylus'),
    'css/jquery.datetimepicker.css',
    output='css/style.css'))

extradmin.register('css_auth', Bundle(
    'css/auth_permissions.styl',
    filters=('stylus', 'cssmin'),
    output='css/auth_permissions.css'))

extradmin.register('js_libs', Bundle(
    'js/libs/jquery.js',
    'js/libs/jquery-ui.js',
    'js/libs/jquery.floatheader.js',
    'js/libs/json2.js',
    'js/libs/modernizr-1.7.js',
    'js/libs/underscore.js',
    'js/libs/backbone.js',
    filters='jsmin',
    output='js/libs.js'))


dashboard = Environment('lemon/dashboard/static/dashboard', '/static/dashboard')

dashboard.register('css', Bundle(
    'css/style.styl',
    filters=('stylus', 'cssmin'),
    output='css/style.css'))


class CommandLine(CommandLineEnvironment):

    def __init__(self, environments, log):
        self.environments = environments
        self.log = log

    def rebuild(self):
        for environment in self.environments:
            for bundle in environment:
                for to_build in bundle.iterbuild():
                    url = '%s/%s' % (to_build.env.url, to_build.output)
                    self.log.info('Building asset: %s' % url)
                    try:
                        to_build.build(force=True)
                    except BuildError, e:
                        self.log.error('Failed, error was: %s' % e)

    def watch(self):
        _mtimes = {}
        _win = (sys.platform == 'win32')
        def check_for_changes():
            changed_bundles = []
            for environment in self.environments:
                for possibly_container in environment:
                    for bundle in possibly_container.iterbuild():
                        for filename in bundle.get_files():
                            filename = bundle.env.abspath(filename)
                            stat = os.stat(filename)
                            mtime = stat.st_mtime
                            if _win:
                                mtime -= stat.st_ctime
                            if _mtimes.get(filename, mtime) != mtime:
                                changed_bundles.append(bundle)
                                _mtimes[filename] = mtime
                                break
                            _mtimes[filename] = mtime
            return changed_bundles
        try:
            self.log.info('Watching bundles for changes...')
            while True:
                changed_bundles = check_for_changes()
                for bundle in changed_bundles:
                    url = '%s/%s' % (bundle.env.url, bundle.output)
                    self.log.info('Rebuilding asset: %s' % url)
                    bundle.build(force=True)
                time.sleep(0.5)
        except KeyboardInterrupt:
            pass

    def clean(self):
        self.log.info('Cleaning generated assets...')
        for environment in self.environments:
            for bundle in environment:
                if not bundle.output:
                    continue
                filepath = bundle.env.abspath(bundle.output)
                if os.path.exists(filepath):
                    os.unlink(filepath)
                    self.log.info('Deleted asset: %s/%s' % (bundle.env.url, bundle.output))

    Commands = {
        'rebuild': rebuild,
        'watch': watch,
        'clean': clean,
    }


def main(argv, envs):
    parser = OptionParser(usage='usage: %%prog [options] [%s]' % (
        ' | '.join(CommandLine.Commands)))
    parser.add_option('-v', dest='verbose', action='store_true',
                      help='be verbose')
    parser.add_option('-q', action='store_true', dest='quiet',
                      help='be quiet')
    options, args = parser.parse_args(argv)

    if len(args) != 1:
        parser.print_help()
        return 1

    # Setup logging
    log = logging.getLogger('webassets')
    if options.verbose:
        level = logging.DEBUG
    elif options.quiet:
        level = logging.WARNING
    else:
        level = logging.INFO
    log.setLevel(level)
    log.addHandler(logging.StreamHandler())

    # Run the selected command
    cmd = CommandLine(envs, log)
    try:
        return cmd.invoke(args[0])
    except CommandError, e:
        print e
        return 1


if __name__ == '__main__':
    environments = (extradmin, dashboard)
    sys.exit(main(sys.argv[1:], environments) or 0)
